


void sig_change1(){
  il[0][0]=1;
  il[0][1]=2;
  il[0][2]=0;
  il[0][3]=1;
  il[1][0]=1;
  il[1][1]=2;
  il[1][2]=0;
  il[1][3]=1;
  il[2][0]=1;
  il[2][1]=2;
  il[2][2]=0;
  il[2][3]=0;
  il[3][0]=2;
  il[3][1]=0;
  il[3][2]=1;
  il[3][3]=1;
  il[4][0]=2;
  il[4][1]=1;
  il[4][2]=1;
  il[4][3]=1;
  il[5][0]=1;
  il[5][1]=1;
  il[5][2]=2;
  il[5][3]=0;
  il[6][0]=0;
  il[6][1]=0;
  il[6][2]=2;
  il[6][3]=1;
  il[7][0]=0;
  il[7][1]=2;
  il[7][2]=1;
  il[7][3]=1;
  il[8][0]=0;
  il[8][1]=2;
  il[8][2]=1;
  il[8][3]=0;

}

void sig_change2(){
  il[0][0]=1;
  il[0][1]=1;
  il[0][2]=0;
  il[0][3]=2;
  il[1][0]=1;
  il[1][1]=1;
  il[1][2]=0;
  il[1][3]=2;
  il[2][0]=2;
  il[2][1]=1;
  il[2][2]=0;
  il[2][3]=0;
  il[3][0]=1;
  il[3][1]=0;
  il[3][2]=1;
  il[3][3]=2;
  il[4][0]=1;
  il[4][1]=2;
  il[4][2]=1;
  il[4][3]=1;
  il[5][0]=1;
  il[5][1]=2;
  il[5][2]=1;
  il[5][3]=0;
  il[6][0]=0;
  il[6][1]=0;
  il[6][2]=1;
  il[6][3]=2;
  il[7][0]=0;
  il[7][1]=1;
  il[7][2]=2;
  il[7][3]=1;
  il[8][0]=0;
  il[8][1]=1;
  il[8][2]=2;
  il[8][3]=0;
}

void sig_change3(){
  il[0][0]=2;
  il[0][1]=1;
  il[0][2]=0;
  il[0][3]=1;
  il[1][0]=2;
  il[1][1]=1;
  il[1][2]=0;
  il[1][3]=1;
  il[2][0]=1;
  il[2][1]=2;
  il[2][2]=0;
  il[2][3]=0;
  il[3][0]=1;
  il[3][1]=0;
  il[3][2]=2;
  il[3][3]=1;
  il[4][0]=1;
  il[4][1]=1;
  il[4][2]=2;
  il[4][3]=1;
  il[5][0]=2;
  il[5][1]=1;
  il[5][2]=1;
  il[5][3]=0;
  il[6][0]=0;
  il[6][1]=0;
  il[6][2]=2;
  il[6][3]=1;
  il[7][0]=0;
  il[7][1]=1;
  il[7][2]=1;
  il[7][3]=2;
  il[8][0]=0;
  il[8][1]=2;
  il[8][2]=1;
  il[8][3]=0;
}

void sig_change4(){
  il[0][0]=1;
  il[0][1]=2;
  il[0][2]=0;
  il[0][3]=1;
  il[1][0]=1;
  il[1][1]=2;
  il[1][2]=0;
  il[1][3]=1;
  il[2][0]=2;
  il[2][1]=1;
  il[2][2]=0;
  il[2][3]=0;
  il[3][0]=2;
  il[3][1]=0;
  il[3][2]=1;
  il[3][3]=1;
  il[4][0]=1;
  il[4][1]=1;
  il[4][2]=1;
  il[4][3]=2;
  il[5][0]=1;
  il[5][1]=2;
  il[5][2]=1;
  il[5][3]=0;
  il[6][0]=0;
  il[6][1]=0;
  il[6][2]=1;
  il[6][3]=2;
  il[7][0]=0;
  il[7][1]=2;
  il[7][2]=1;
  il[7][3]=1;
  il[8][0]=0;
  il[8][1]=1;
  il[8][2]=2;
  il[8][3]=0;
}

void initialise_queue () {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 4; j++) {
      q[i].push (j);
    }
  }
}

void switch_light () {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 4; j++) {
      if (il[i][j] == 2) {
        il[i][j] = 1;
      }
    }
    int new_light = q[i].front ();
    q[i].pop ();
    il[i][new_light] = 2;
    q[i].push (new_light);
  }
}

void initial_signal_priority()
{
  for(int i=0;i<=8;i++)
  {
    for(int j=0;j<=3;j++)
    {
      if((i==0&&j==2)||(i==1&&j==2)||(i==2&&j==2)||(i==2&&j==3)||(i==3&&j==1)||(i==5&&j==3)||(i==6&&j==0)||(i==6&&j==1)||(i==7&&j==0)||(i==8&&j==0)||(i==8&&j==3))
      {
        il[i][j]=0;
      }
      else if ((i==0&&j==1)||(i==1&&j==1)||(i==2&&j==1)||(i==5&&j==2)||(i==7&&j==3)||(i==6&&j==3)||(i==3&&j==0))
      {
        il[i][j]=2;
      }
      else
        il[i][j]=1;
      //std::cout<<"intersection_light"<<i<<j<<"="<<il[i][j]<<"\n";
    }
    
  }
  
}